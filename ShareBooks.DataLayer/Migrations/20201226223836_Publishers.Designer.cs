// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShareBooks.DataLayer.Context;

namespace ShareBooks.DataLayer.Migrations
{
    [DbContext(typeof(ShareBooksContext))]
    [Migration("20201226223836_Publishers")]
    partial class Publishers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookDescription")
                        .IsRequired();

                    b.Property<string>("BookFaTitle")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("BookFileName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("BookImageName")
                        .HasMaxLength(100);

                    b.Property<string>("BookLatinTitle")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("CountFiles");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsSpecial");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("LevelId");

                    b.Property<string>("PageNumber")
                        .IsRequired();

                    b.Property<int?>("PublisherId");

                    b.Property<int?>("SecondSubGroupId");

                    b.Property<int?>("SubGroupId");

                    b.Property<string>("Tags")
                        .HasMaxLength(600);

                    b.Property<string>("TranslatorName")
                        .IsRequired();

                    b.Property<int>("Volume");

                    b.Property<string>("Writer")
                        .IsRequired();

                    b.HasKey("BookId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SecondSubGroupId");

                    b.HasIndex("SubGroupId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.BookComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsReadAdmin");

                    b.Property<int>("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookComments");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.BookGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("GroupImageName")
                        .HasMaxLength(100);

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("ParentId");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("BookGroups");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.BookLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("LevelId");

                    b.ToTable("BookLevels");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Permissions.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PermissionId");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Permissions.RolePermission", b =>
                {
                    b.Property<int>("RP_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("RP_Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Publishers.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("PublisherImageName")
                        .HasMaxLength(100);

                    b.Property<string>("PublisherTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Site.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("MailPassword")
                        .HasMaxLength(100);

                    b.Property<string>("SiteDescription");

                    b.Property<string>("SiteKeys");

                    b.Property<string>("SiteName")
                        .HasMaxLength(100);

                    b.Property<string>("SmsApi");

                    b.Property<string>("SmsSender")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Users.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("UserAvatar")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("UR_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("UR_Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.Book", b =>
                {
                    b.HasOne("ShareBooks.DataLayer.Entities.Books.BookGroup", "BookGroup")
                        .WithMany("Books")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShareBooks.DataLayer.Entities.Books.BookLevel", "BookLevel")
                        .WithMany("Books")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShareBooks.DataLayer.Entities.Publishers.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId");

                    b.HasOne("ShareBooks.DataLayer.Entities.Books.BookGroup", "SecondSubGroup")
                        .WithMany("SecondSubGroupBook")
                        .HasForeignKey("SecondSubGroupId");

                    b.HasOne("ShareBooks.DataLayer.Entities.Books.BookGroup", "SubGroup")
                        .WithMany("SubGroupBook")
                        .HasForeignKey("SubGroupId");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.BookComment", b =>
                {
                    b.HasOne("ShareBooks.DataLayer.Entities.Books.Book", "Book")
                        .WithMany("BookComments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShareBooks.DataLayer.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Books.BookGroup", b =>
                {
                    b.HasOne("ShareBooks.DataLayer.Entities.Books.BookGroup")
                        .WithMany("BookGroups")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Permissions.Permission", b =>
                {
                    b.HasOne("ShareBooks.DataLayer.Entities.Permissions.Permission")
                        .WithMany("Permissions")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Permissions.RolePermission", b =>
                {
                    b.HasOne("ShareBooks.DataLayer.Entities.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShareBooks.DataLayer.Entities.Users.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShareBooks.DataLayer.Entities.Users.UserRole", b =>
                {
                    b.HasOne("ShareBooks.DataLayer.Entities.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShareBooks.DataLayer.Entities.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
